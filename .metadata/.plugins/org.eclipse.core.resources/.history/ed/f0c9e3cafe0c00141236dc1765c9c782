
public class PriorityQueue {
	Edge a[];
	int heapsize;
	int MAX;
	
	int parent(int i) {
		if ( i > 0 && i < heapsize) {
			return((i - 1)/2);
		}
		return -1;
	}
	
	int lchild(int i) {
		if ( i > 0 && i < heapsize) {
			int l = 2*i + 1;
			if (heapsize > l)
			return l;
		}
		return -1;
	}
	
	int rchild(int i) {
		if ( i > 0 && i < heapsize) {
			int l = 2*i + 2;
			if (heapsize > l)
			return l;
		}
		return -1;
	}
	
	boolean isEmpty() {
		return(heapsize == 0);
	}
	
	Edge deleteMin() {
		if (heapsize > 0) {
			Edge val = a[0];
			a[0] = a[heapsize-1];
			heapsize--;
			percolateDown(0);
			return val;
		}
		return null;
	}
	
	void percolateDown(int i){
		if ( i > 0 && i < heapsize) {
			int min = i;
			if ( a[l].w < a[i].w)
				min = l;
		}
	}
	
	public PriorityQueue() {
		// TODO Auto-generated constructor stub
	}

}
